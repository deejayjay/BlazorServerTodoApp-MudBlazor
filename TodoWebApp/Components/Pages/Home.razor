@page "/"
@using TodoWebApp.Services.Interfaces
@using TodoWebApp.ViewModels

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ITodoService TodoService

<PageTitle>Home</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <h1 class="my-4">To Do Items</h1>
    <MudTable Items="@todoItems" Hover="true" Breakpoint="Breakpoint.Sm" RowClass="task-row" RowClassFunc="GetRowClass">
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Created On</MudTh>
            <MudTh>Modified On</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Status">@(context.IsCompleted ? "Completed" : "Incomplete")</MudTd>
            <MudTd DataLabel="Created On">@context.CreatedAt</MudTd>
            <MudTd DataLabel="Modified On">@context.UpdatedAt</MudTd>
            <MudTd DataLabel="Actions">
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(_ => HandleEditTodoClick(context.Id))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.CheckCircleOutline" Color="@Color.Warning" OnClick="@(_ => HandleCompletionStatusClick(context.Id))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="@Color.Error" OnClick="@(e => OpenConfirmDeleteDialogAsync(context.Id))" />
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private List<TodoItemResponseModel> todoItems = [];

    protected override async Task OnInitializedAsync()
    {
        // Fetch the todo items when the component is initialized
        todoItems = (await TodoService.GetAllAsync()).ToList();
    }

    private string GetRowClass(TodoItemResponseModel item, int _)
    {
        return item.IsCompleted ? "completed-row" : string.Empty;
    }

    private void HandleEditTodoClick(int id)
    {
        NavigationManager.NavigateTo($"todo/upsert/{id}");
    }

    private async Task OpenConfirmDeleteDialogAsync(int id)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x=>x.Title, "Confirm Delete" },
            { x=>x.Content, "Are you sure that you want to delete this item?" }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);

        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await DeleteTodoAndShowResultAsync(id);
        }
    }

    private async Task DeleteTodoAndShowResultAsync(int id)
    {
        var result = await TodoService.DeleteAsync(id);

        if (!result)
        {
            Snackbar.Add("Failed to delete the todo item.", Severity.Error);
            return;
        }

        Snackbar.Add("Todo item deleted successfully.", Severity.Success);
        todoItems = (await TodoService.GetAllAsync()).ToList();
    }
    private async Task HandleCompletionStatusClick(int id)
    {
        var result = await TodoService.ChangeStatusAsync(id);

        if (result.Id != id)
        {
            Snackbar.Add("Failed to change the completion status.", Severity.Error);
            return;
        }

        todoItems = (await TodoService.GetAllAsync()).ToList();

        Snackbar.Add("Todo item status changed successfully.", Severity.Success);
    }
}